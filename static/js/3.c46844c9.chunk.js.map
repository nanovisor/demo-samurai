{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","React","Component","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","src","style","maxWidth","alt","className","s","descriptionBlock","photos","small","lookingForAJobDescription","Preloader","Post","message","likes","item","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","required","MyPosts","memo","console","log","postsElements","posts","map","p","i","likeCount","likesCount","key","id","createRef","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","auth","isAuth","withRouter"],"mappings":"6EACAA,EAAOC,QAAU,CAAC,iBAAmB,wC,oBCArCD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,yHCEGC,IAAMC,U,QC0CnBC,EA1CgB,SAACC,GAAU,MAGRC,oBAAS,GAHD,mBAGjCC,EAHiC,KAGvBC,EAHuB,OAIZF,mBAASD,EAAMI,QAJH,mBAIjCA,EAJiC,KAIzBC,EAJyB,KAOtCC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAgBV,OACI,8BACMF,GACE,6BACI,0BAAMK,cAlBG,WACrBJ,GAAY,KAiBwCH,EAAMI,QAAU,UAG/DF,GACG,6BACI,2BAAOM,SAdA,SAACC,GAEpBJ,EAAUI,EAAEC,cAAcC,QAYmBC,WAAW,EAAMC,OAnBvC,WACvBV,GAAY,GACZH,EAAMc,aAAaV,IAkBHO,MAAOP,OCRhBW,EAxBK,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,QAASZ,EAA0B,EAA1BA,OAAQU,EAAkB,EAAlBA,aACnC,OAAKE,EAKD,6BACI,6BACI,yBAAKC,IAAI,eAAeC,MAAO,CAACC,SAAU,SAAUC,IAAI,QAG5D,yBAAKC,UAAWC,IAAEC,kBACd,yBAAKN,IAAKD,EAAQQ,OAAOC,MAAOL,IAAI,KACpC,6BAEA,kBAAC,EAAD,CAAwBhB,OAAQA,EAAQU,aAAcA,IACtD,6BAEA,2BAAIE,EAAQU,6BAhBb,kBAACC,EAAA,EAAD,O,4CCOAC,EAZF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MACpB,OACI,yBAAKT,UAAWC,IAAES,MACd,yBAAKd,IAAI,oGACLG,IAAI,QACPS,EACD,6BACA,uCAAaC,K,iCCFnBE,EAAcC,YAAiB,IAcjCC,EAAsBC,YAAU,CAACC,KAAM,yBAAjBD,EAZL,SAACnC,GAClB,OAAO,0BAAMqC,SAAUrC,EAAMsC,cACrB,6BACI,kBAACC,EAAA,EAAD,CAAOC,KAAK,cAAcC,UAAWC,IACrCC,SAAU,CAACC,IAAUZ,MAEzB,6BACI,iDA6BDa,EAtBDhD,IAAMiD,MAAK,SAAS9C,GAC9B+C,QAAQC,IAAI,qBAEZ,IAAMC,EAAgBjD,EAAMkD,MAAMC,KAAK,SAACC,EAAGC,GAAJ,OAAU,kBAAC,EAAD,CAAMxB,QAASuB,EAAEvB,QAASyB,UAAWF,EAAEG,WAAYC,IAAKJ,EAAEK,QAEpF5D,IAAM6D,YAM7B,OACI,yBAAKrC,UAAWC,IAAEqC,YACd,wCACA,kBAACzB,EAAD,CAAqBG,SAPX,SAACuB,GACf5D,EAAM6D,QAAQD,EAAOE,gBAOjB,yBAAKzC,UAAWC,IAAE4B,OACbD,O,QChBFc,EAFUC,aAfD,SAACC,GACrB,MAAO,CACHf,MAAOe,EAAMC,YAAYhB,MACzBY,YAAaG,EAAMC,YAAYJ,gBAIZ,SAACK,GACxB,MAAO,CACHN,QAAS,SAACC,GACNK,EAASC,YAAqBN,QAKjBE,CAA8CnB,GCRxDwB,EATC,SAACrE,GACb,OACI,6BACI,kBAAC,EAAD,CAAagB,QAAShB,EAAMgB,QAASZ,OAAQJ,EAAMI,OAAQU,aAAcd,EAAMc,eAC/E,kBAAC,EAAD,Q,uBCGNwD,E,kLAEE,IAAIC,EAASC,KAAKxE,MAAMyE,MAAMC,OAAOH,OAEhCA,IACDA,EAASC,KAAKxE,MAAM2E,mBAGhBH,KAAKxE,MAAM4E,QAAQC,KAAK,UAM5BL,KAAKxE,MAAM8E,eAAeP,GAC1BC,KAAKxE,MAAM+E,UAAUR,K,+BAKzB,OACI,kBAAC,EAAD,iBACQC,KAAKxE,MADb,CAEIgB,QAASwD,KAAKxE,MAAMgB,QACpBZ,OAAQoE,KAAKxE,MAAMI,OACnBU,aAAc0D,KAAKxE,MAAMc,oB,GAzBVjB,IAAMC,WAuCtBkF,sBACXhB,aARkB,SAACC,GAAD,MAAY,CAC9BjD,QAASiD,EAAMC,YAAYlD,QAC3BZ,OAAQ6D,EAAMC,YAAY9D,OAC1BuE,iBAAkBV,EAAMgB,KAAKV,OAC7BW,OAAQjB,EAAMgB,KAAKC,UAIM,CAACJ,mBAAgBC,cAAWjE,mBACrDqE,IAFWH,CAIbV","file":"static/js/3.c46844c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1A7Um\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1vLaw\",\"posts\":\"MyPosts_posts__kp8s0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3h2Qd\"};","import React from 'react';\r\n// import s from './ProfileInfo.module.css';\r\n\r\nclass ProfileStatus extends React.Component {\r\n    \r\n    // это локальный стейт, тут глобальный стейт использовать ни к чему, эти данные нужны только\r\n    // внутри этого компонента\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        // обновляем стейт, вызывая перерисовку компонента\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        // обновляем стейт, вызывая перерисовку компонента\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode && \r\n                    <div>\r\n                        <span onClick={ this.activateEditMode }>{this.props.status || '-----'}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode && \r\n                    <div>\r\n                        <input onChange={this.onStatusChange} autoFocus={true} onBlur={ this.deactivateEditMode } value={this.state.status} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React, { useEffect, useState } from 'react';\r\n// import s from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    // useState(false) вернет массив с двумя значениями\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    // хук useEffect выполняется после каждой перерисовки\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]) // задаем зависимость для хука, хук срабатывает когда зависимость меняется\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        // меняем локальный стейт\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n                </div>\r\n            }\r\n            {editMode && \r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                        value={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n    if (!profile) { // если null или undefined\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src=\"./resort.jpg\" style={{maxWidth: '500px'}} alt=\"#a\" />\r\n            </div>\r\n\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.small} alt=\"\"/>\r\n                <br/>\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n                <br/>\r\n                \r\n                <p>{profile.lookingForAJobDescription}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = ({message, likes}) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://yt3.ggpht.com/a/AATXAJxegcKj7lnz8MCMgcAz-gpSgPs5u5yMvynOEWiL=s48-c-k-c0xffffffff-no-rj-mo'\r\n                alt='ava' />\r\n            {message}\r\n            <br/>\r\n            <span>likes {likes}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {PureComponent} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { addPostActionCreator, updateNewPostActionCreator } from '../../../redux/profile-reducer';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newPostText\" component={Textarea}\r\n                validate={[required, maxLength10]} />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nvar MyPosts = React.memo(function(props) {\r\n    console.log('my post is render')\r\n\r\n    const postsElements = props.posts.map( (p, i) => <Post message={p.message} likeCount={p.likesCount} key={p.id} />)\r\n\r\n    const newPostElement = React.createRef() // ссылка на элемент для дальнейшего обращения\r\n\r\n    const onAddPost = (values) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport Profile from './../Profile';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n// import s from './Profile.module.css';\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport {getUserProfile, getStatus, updateStatus} from '../../redux/profile-reducer';\r\nimport { Redirect, withRouter } from 'react-router';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n// import s from './Profile.module.css';\r\n\r\n// контейнерный реакт компонент, выполняет сайд эффекты, \r\n// все сайд эффекты выполняются в методе жизненного цикла - componentDidMount() { ... }\r\n\r\nclass ProfileContainer extends React.Component {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            // userId = 16050\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        \r\n        // TODO: с проверкой нет ошибки\r\n        // if (userId) {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        // }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile \r\n                {...this.props} \r\n                profile={this.props.profile}\r\n                status={this.props.status} \r\n                updateStatus={this.props.updateStatus}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n// эту функцию вызовет сам connect()\r\nlet mapStateToProps = (state) => ({ // эти пропсы будут доступны в компоненте\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}